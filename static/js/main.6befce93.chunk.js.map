{"version":3,"sources":["components/ProgressBar/index.tsx","components/ProgressSet/index.tsx","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Bar","p","error","Text","ProgressBar","props","value","limit","percent","Math","round","width","data-testid","style","ControlPane","ProgressSet","useState","selected","setSelected","bars","setBars","buttons","map","b","i","key","onChange","e","parseInt","target","onClick","result","handleClick","App","data","setData","useEffect","axios","get","then","response","ReactDOM","render","document","getElementById"],"mappings":"gyBAGA,IAAMA,EAAUC,IAAOC,IAAV,KAaPC,EAAMF,IAAOC,IAAV,KAES,SAAAE,GAAC,OAAIA,EAAEC,MAAQ,MAAQ,aAMnCC,EAAOL,IAAOC,IAAV,KA2BKK,MAdf,SAAqBC,GAAe,IACxBC,EAAuBD,EAAvBC,MADuB,EACAD,EAAhBE,aADgB,MACR,IADQ,EAGzBC,EAAUC,KAAKC,MAAOJ,EAAQC,EAAS,KAEvCL,EAAQM,EAAU,IAClBG,GAAST,EAAQ,IAAMM,GAAW,IAExC,OAAO,kBAACX,EAAD,KACH,kBAACG,EAAD,CAAKY,cAAY,MAAMC,MAAO,CAAEF,SAAST,MAAOA,IAChD,kBAACC,EAAD,KAAOQ,EAAP,KAAgBL,EAAhB,O,wHC3CR,IAAMQ,EAAchB,IAAOC,IAAV,KA4CFgB,MAhCf,SAAqBV,GAAe,IAAD,EAEHW,mBAAS,GAFN,mBAE5BC,EAF4B,KAElBC,EAFkB,OAGXF,mBAASX,EAAMc,MAHJ,mBAG5BA,EAH4B,KAGtBC,EAHsB,KAIzBC,EAAmBhB,EAAnBgB,QAASd,EAAUF,EAAVE,MASjB,OACE,6BACGY,EAAKG,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAAC,EAAD,CAAaC,IAAKD,EAAGlB,MAAOiB,EAAGhB,MAAOA,OAC1D,kBAACO,EAAD,KACE,4BAAQY,SAAU,SAAAC,GAAC,OAAIT,EAAYU,SAASD,EAAEE,OAAOvB,SAASA,MAAOW,GAClEE,EAAKG,KAAI,SAACC,EAAGC,GAAJ,OACR,4BAAQC,IAAKD,EAAGlB,MAAOkB,GAAvB,YAAoCA,EAAI,OAG3CH,EAAQC,KAAI,SAACC,EAAGC,GAAJ,OACX,4BAAQC,IAAKD,EAAGZ,cAAY,SAASkB,QAAS,kBAhBtD,SAAqBxB,GACnB,IAAMyB,EAASZ,EAAKF,GAAYX,EAChCa,EAAKF,GAAYc,EAAS,EAAI,EAAIA,EAClCX,EAAQ,YAAID,IAa8Ca,CAAYT,KAC7DA,EAAI,EAAJ,WAAYA,GAAMA,S,iBCVhBU,MAjBf,WAAgB,IAAD,EAESjB,qBAFT,mBAERkB,EAFQ,KAEFC,EAFE,KAWb,OALAC,qBAAU,WACRC,IAAMC,IAfG,qCAgBNC,MAAK,SAAAC,GAAQ,OAAIL,EAAQK,EAASN,WACpC,IAEI,yBAAKrB,MAAO,CAAEF,MAAO,UAC1B,kDACCuB,EAAO,kBAAC,EAAgBA,GAAW,uCCrBxCO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6befce93.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Wrapper = styled.div`\n    position: relative;\n    width: 100%;\n    height: 40px;\n    border: 1px solid #d9d8da;\n    text-align: center;\n    margin-bottom: 8px;\n`\n\ntype BarProps = {\n    error: boolean\n}\n\nconst Bar = styled.div<BarProps>`\n    position: absolute;\n    background: ${p => p.error ? 'red' : '#b2d7e7'};\n    width: 20%;\n    height: 100%;\n    transition: 0.3s all;\n`;\n\nconst Text = styled.div`\n    position: absolute;\n    width: 100%;\n    padding: 10px;\n    box-sizing: border-box;\n`;\n\n\ntype Props = {\n    value: number;\n    limit?: number;\n}\n\nfunction ProgressBar(props: Props) {\n    const { value, limit = 100 } = props;\n\n    const percent = Math.round((value / limit) * 100);\n\n    const error = percent > 100;\n    const width = (error ? 100 : percent) + \"%\"\n\n    return <Wrapper>\n        <Bar data-testid=\"bar\" style={{ width }} error={error}></Bar>\n        <Text>{width} ({value})</Text>\n    </Wrapper>\n}\n\nexport default ProgressBar;\n","import React, { useState } from 'react';\nimport styled from \"styled-components\"\nimport ProgressBar from '../ProgressBar';\n\nconst ControlPane = styled.div`\n  select, button {\n    margin-right: 8px;\n  }\n`;\n\ninterface Props {\n  buttons: Array<number>,\n  bars: Array<number>,\n  limit: number\n}\n\nfunction ProgressSet(props: Props) {\n\n  let [selected, setSelected] = useState(0);\n  let [bars, setBars] = useState(props.bars);\n  const { buttons, limit } = props;\n\n\n  function handleClick(value: number) {\n    const result = bars[selected] + value;\n    bars[selected] = result < 0 ? 0 : result;\n    setBars([...bars])\n  }\n\n  return (\n    <div>\n      {bars.map((b, i) => <ProgressBar key={i} value={b} limit={limit} />)}\n      <ControlPane>\n        <select onChange={e => setSelected(parseInt(e.target.value))} value={selected}>\n          {bars.map((b, i) => (\n            <option key={i} value={i}>#progress{i + 1}</option>)\n          )}\n        </select>\n        {buttons.map((b, i) => (\n          <button key={i} data-testid=\"button\" onClick={() => handleClick(b)}>\n            {b > 0 ? `+${b}` : b}\n          </button>\n        ))}\n      </ControlPane>\n    </div>\n  );\n}\n\nexport default ProgressSet;\n","import React, { useEffect, useState } from 'react';\nimport ProgressSet from './components/ProgressSet';\nimport axios from \"axios\"\n\n\nconst _URL = \"https://pb-api.herokuapp.com/bars\"\n\ninterface Data {\n  buttons: Array<number>,\n  bars: Array<number>,\n  limit: number\n}\n\nfunction App() {\n\n  let [data, setData] = useState<Data>();\n\n  // data = { \"buttons\": [25, 5, -10, -25, 100, -100], \"bars\": [100, 150, 200, 300], \"limit\": 300 }\n\n  useEffect(() => {\n    axios.get<Data>(_URL)\n      .then(response => setData(response.data))\n  }, [])\n\n  return <div style={{ width: \"320px\" }}>\n    <h1>Progress Bars Demo</h1>\n    {data ? <ProgressSet {...data} /> : <></>}\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}